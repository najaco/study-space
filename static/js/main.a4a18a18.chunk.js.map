{"version":3,"sources":["logo.svg","MapContainer.js","api/ReviewModule.js","api/LocationModule.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","width","height","MapContainer","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","dist","google","props","zoom","style","initialCenter","lat","lng","Component","GoogleApiWrapper","apiKey","api_ReviewModule","ReviewModule","instance","reviews","data","i","length","push","rating","filter","j","ReviewFilters","RATING","_swap","TIME_STAMP","timestamp","title","description","location","username","freeze","ID","header","body","Location","Username","array","temp","LocationModule","location_names","current_location","undefined","SERVER_URL","location_name","locationModule","getInstance","locations","curr_location_data","name","short_name","average_review","comments","author","desc","App","_this","call","createComments","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","comment","className","card","subTitle","text-align","readonly","stars","cancel","err","return","maybeAllowNewComment","inputtext","state","onChange","e","setState","target","inputtextarea","rows","cols","autoResize","review","primereact_button","label","onClick","makePost","building","buildingChanged","bind","assertThisInitialized","obj","hasOwnProperty","loadLocations","getLocations","_this2","fetch","getListOfLocationsURL","method","then","response","json","responseJson","forceUpdate","catch","error","console","_this3","getLocationDataURL","isEmptyObject","getLocationData","log","gmap","options","center","dropdown","optionLabel","placeholder","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a4a18a18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\n\nconst mapStyles = {\n    width: '100%',\n    height: '100%'\n};\n\nexport class MapContainer extends Component {\n    render() {\n        return (\n            <Map\n                google={this.props.google}\n                zoom={14}\n                style={mapStyles}\n                initialCenter={{\n                    lat: 40.4318914,\n                    lng: -86.91750952604869\n                }}\n            />\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyD5x5n_np54p6TzuSVG_DYu9nEQSWH75LI'\n})(MapContainer);","/**\n * @author Stephen Davis\n *\n * @description api module for managing reviews on the client\n * including building, sorting and searching\n *\n */\nclass ReviewModule {\n\n    /**\n     * @description returns the instance being used. If no instance\n     * has been created then this method will create one. This method\n     * should not be called outside of this class. Please use getInstance()\n     *\n     * @returns {ReviewModule|*} the current instance being used\n     */\n    constructor() {\n        // enforce singleton class\n        if (!ReviewModule.instance) {\n            // initialize class level fields\n            this.reviews = []; // list (review object)\n            ReviewModule.instance = this;\n        }\n        return ReviewModule.instance;\n    }\n\n    /**\n     * @description returns the instance being used. If no instance\n     * has been created then this method will create one\n     *\n     * @returns {ReviewModule|*} the current instance being used\n     */\n    static getInstance() {\n        // enforce singleton class\n        if (!ReviewModule.instance) {\n            ReviewModule.instance = new ReviewModule();\n        }\n        return ReviewModule.instance;\n    }\n\n    /**\n     * @description loads an array of reviews into the client\n     * from the server for read-only purposes\n     *\n     * @param data - an array of review objects\n     */\n    loadReviews(data) {\n        // reset current reviews\n        this.reviews = [];\n        // load reviews into the client\n        for (let i = 0; i < data.length; i++) {\n            this.reviews.push(data[i]);\n        }\n    }\n\n    /**\n     * @description returns of all the reviews that are currently\n     * loaded into the client\n     *\n     * @returns {Array} of review objects\n     */\n    listReviews() {\n        return this.reviews;\n    }\n\n    /**\n     * @description takes all the reviews currently loaded into\n     * the client and averages their ratings and returns the result\n     * @returns {number} - the average rating of all the reviews\n     * currently loaded into the client\n     */\n    averageRating() {\n        let rating = 0;\n        for (let i = 0; i < this.reviews.length; i++) {\n            let review = this.reviews[i];\n            rating += review.rating;\n        }\n        rating /= this.reviews.length;\n        return rating;\n    }\n\n    /**\n     * @description sorts the reviews stored on the client based on\n     * the filter passed. This is an in-place sort and only updates\n     * the values on the module level, listReviews will still have\n     * to be called to get the updated values\n     *\n     * @param filter - an enum defined under ReviewFilter which\n     * determines how the reviews will be sorted\n     */\n    sort(filter) {\n        for (let i = 0; i < this.reviews.length - 1; i++) {\n            for (let j = i + 1; j < this.reviews.length; j++) {\n                switch (filter) {\n                    case ReviewFilters.RATING: {\n                        /* TODO: check that the review object uses rating as a variable */\n                        if (this.reviews[i].rating < this.reviews[j].rating) {\n                            this._swap(this.reviews, i, j);\n                        }\n                        break;\n                    }\n                    case ReviewFilters.TIME_STAMP: {\n                        /* TODO: check that the review object uses timestamp as a variable */\n                        /* TODO: look for a way to convert and compare 2 timestamp strings */\n                        if (this.reviews[i].timestamp < this.reviews[j].timestamp) {\n                            this._swap(this.reviews, i, j);\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @description returns a new review object with the given parameters\n     * @param rating - the rating of the review\n     * @param title - 255 character title of the review\n     * @param description - 255 description of the review\n     * @param timestamp - time review was submitted on the client\n     * @param location - full name of the location\n     * @param username - the username of the user submitting the review\n     * @returns {Readonly<{ID: number, rating: *, header: *, body: *, timestamp: *, Location: *, Username: *}>}\n     */\n    buildReview(rating, title, description, timestamp, location, username) {\n        return Object.freeze(\n            {\n                \"ID\": 0,\n                \"rating\": rating,\n                \"header\": title,\n                \"body\": description,\n                \"timestamp\": timestamp,\n                \"Location\": location,\n                \"Username\": username,\n            }\n        );\n    }\n\n\n    /**\n     * @description swaps two elements in an array\n     * @param array - the array the swap is being performed on\n     * @param i - the first index being swapped\n     * @param j - the second index being swapped\n     * @private this method is private\n     */\n    _swap(array, i, j) {\n        let temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n\n}\n\n// public class\nexport default ReviewModule;\n\n// sorting enums\nexport let ReviewFilters = Object.freeze({\"RATING\": 0, \"TIME_STAMP\": 1});","/**\n *\n * @author Stephen Davis\n *\n * @description api module for managing locations on the client\n * including listing all locations, adding and deleting a review\n *\n */\nclass LocationModule {\n\n    /**\n     * @description returns the instance being used. If no instance\n     * has been created then this method will create one. This method\n     * should not be called outside of this class. Please use getInstance()\n     *\n     * @returns {LocationModule|*} the current instance being used\n     */\n    constructor() {\n        // enforce singleton class\n        if (!LocationModule.instance) {\n            // initialize class level fields\n            this.location_names = [];           // list (string)\n            this.current_location = undefined;  // object\n            LocationModule.instance = this;\n        }\n        return LocationModule.instance;\n    }\n\n    /**\n     * @description returns the instance being used. If no instance\n     * has been created then this method will create one\n     *\n     * @returns {LocationModule|*} the current instance being used\n     */\n    static getInstance() {\n        // enforce singleton class\n        if (!LocationModule.instance) {\n            LocationModule.instance = new LocationModule();\n        }\n        return LocationModule.instance;\n    }\n\n    /**\n     * @description loads an array of locations names' into this\n     * module for read-only purposes\n     *\n     * @param data - an array of strings representing the names of\n     * the locations stored in the database\n     */\n    loadLocations(data) {\n        // reset current location names\n        this.location_names = [];\n        // load\n        for (let i = 0; i < data.length; i++) {\n            this.location_names.push(data[i]);\n        }\n    }\n\n    /**\n     * @description loads the json object into this module for read and\n     * write purposes\n     *\n     * @param data - the json object loaded from the database\n     */\n    loadCurrentLocation(data) {\n        this.current_location = data;\n    }\n\n    /**\n     * @description returns a list of the locations by name\n     *\n     * @returns {Array} of location names\n     */\n    listLocations() {\n        return this.location_names;\n    }\n\n    /**\n     * @returns {Location} object of the current location\n     */\n    currentLocation() {\n        return this.current_location;\n    }\n\n    /**\n     * @returns {string} url http request to server for getting\n     * a list of locations from the database\n     */\n    getListOfLocationsURL() {\n        return SERVER_URL + \"locations?command=list\";\n    }\n\n    /**\n     * @returns {string} url http request to server for getting\n     * the data about a specific location from the database\n     */\n    getLocationDataURL(location_name) {\n        return SERVER_URL + \"locations?command=get&name=\" + location_name;\n    }\n\n    /**\n     * @returns {string} url http request to server for posting\n     * a review for at the current location\n     */\n    getPostReviewToLocationURL() {\n        return SERVER_URL + \"locations?command=review\";\n    }\n\n}\n\n/**\n * @type {string} url to server\n */\nconst SERVER_URL = \"https://2vdx6dl0a1.execute-api.us-east-1.amazonaws.com/prod/\";\n\n// public class\nexport default LocationModule;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MapContainer from \"./MapContainer\";\n\n/* Google Maps */\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\n\n/* PrimeReact */\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeflex/primeflex.css';\nimport 'primeicons/primeicons.css';\n\nimport { GMap } from 'primereact/gmap';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Card } from 'primereact/card';\nimport { Rating } from 'primereact/rating';\nimport { Button } from 'primereact/button';\nimport { InputTextarea } from 'primereact/inputtextarea';\nimport { InputText } from 'primereact/inputtext';\n\nimport ReviewModule from './api/ReviewModule';\nimport LocationModule from './api/LocationModule';\n\nlet reviewModule = ReviewModule.getInstance();\nlet locationModule = LocationModule.getInstance();\n\nconst mapStyles = {\n    width: '100%',\n    height: '570px'\n};\n\n// Obtain this from database\nvar locations = [];\n\nvar curr_location_data = {\n    name: 'Fake Building Name',\n    short_name: 'SHRT',\n    average_review: null,\n    comments: [\n        {\n            author: 'Fake 1',\n            title: 'Love it!',\n            desc: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n            rating: 10\n        },\n        {\n            author: 'Fake 2',\n            title: 'Eh.',\n            desc: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n            rating: 5\n        }\n    ]\n};\n\nclass App extends Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            building: null,\n            comment: '',\n            title: ''\n        };\n\n        this.buildingChanged = this.buildingChanged.bind(this);\n        this.makePost = this.makePost.bind(this);\n\n    }\n\n    isEmptyObject(obj) {\n        for(var key in obj) {\n            if(obj.hasOwnProperty(key))\n                return false;\n        }\n        return true;\n    }\n\n    componentDidMount() {\n        locationModule.loadLocations(this.getLocations());\n    }\n\n    getLocations() {\n        return fetch(locationModule.getListOfLocationsURL(), {method: \"GET\"}).then((response) => response.json())\n            .then((responseJson) => {\n                locations = responseJson;\n                this.forceUpdate();\n            })\n            .catch((error) => {\n                console.error(error);\n            }\n        );\n    }\n\n    getLocationData(location) {\n        return fetch(locationModule.getLocationDataURL(location), {method: \"GET\"}).then((response) => response.json())\n            .then((responseJson) => {\n                if (!this.isEmptyObject(responseJson)) {\n                    curr_location_data = responseJson;\n                } else {\n                    curr_location_data = {\n                        name: 'Wilmeth Active Learning Center',\n                        short_name: 'WALC',\n                        comments: [\n                            {\n                                author: 'Fake 1',\n                                title: 'Love it!',\n                                desc: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n                                rating: 10\n                            },\n                            {\n                                author: 'Fake 2',\n                                title: 'Eh.',\n                                desc: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n                                rating: 5\n                            }\n                        ]\n                    }\n                }\n                this.forceUpdate();\n            })\n            .catch((error) => {\n                console.error(error);\n            }\n        );\n    }\n\n    buildingChanged(e) {\n        // TODO: Change building info here\n        this.setState({building: e.value});\n        this.getLocationData(e.value);\n    }\n\n    makePost(e) {\n        curr_location_data.comments.push(\n            {\n                author: 'Test',\n                title: this.state.title,\n                rating: this.state.review,\n                desc: this.state.comment\n            }\n        );\n        console.log(locations);\n        this.forceUpdate();\n    }\n\n    createComments = () => {\n        let comments = [];\n\n        curr_location_data.average_review = 0;\n\n        for (let comment of curr_location_data.comments) {\n            comments.push(\n                <div className=\"p-col-12\">\n                    <Card title={comment.title} subTitle={comment.author}>\n                        <div className=\"p-grid\">\n                            <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                {comment.desc}\n                            </div>\n                            <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                <Rating value={comment.rating} readonly={true} stars={10} cancel={false} />\n                            </div>\n                        </div>\n                    </Card>\n                </div>\n            );\n            curr_location_data.average_review += comment.rating;\n        }\n\n        curr_location_data.average_review = curr_location_data.average_review/curr_location_data.comments.length;\n\n        return comments;\n    }\n\n    maybeAllowNewComment = () => {\n        let comment = [];\n        // if (userAuthenticated) {\n            comment.push(\n                    <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                        <h4>Comment Title:</h4> \n                        <InputText value={this.state.title} onChange={(e) => this.setState({title: e.target.value})} />\n                    </div>\n            );\n            comment.push(\n                    <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                        <h4>Comment Title:</h4> \n                        <InputTextarea rows={5} cols={30} value={this.state.comment} autoResize={true} onChange={(e) => {this.setState({comment: e.target.value})}} />\n                    </div>\n            );\n            comment.push(\n                    <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                        <h4>Give Review:</h4> \n                        <Rating value={this.state.review} stars={10} cancel={false} onChange={(e) => {this.setState({review: e.target.value})}} />\n                    </div>\n            );\n            comment.push(\n                    <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                        <Button label=\"Post Comment\" onClick={this.makePost}/>\n                    </div>\n            );\n            return comment;\n        // } else {\n\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"p-grid p-col-12\">\n                    <div className=\"p-col-8\">\n                        <GMap options={{\n                                center: {lat: 40.4318914, lng: -86.91750952604869},\n                                zoom: 14\n                            }} style={mapStyles}\n                        />\n                    </div>\n                    <div className=\"p-col-4\">\n                        <Card style={{'width': '100%', 'height': '570px', 'text-align': 'left'}} title={\"Give a Review\"}>\n                            {this.maybeAllowNewComment()} \n                        </Card>\n                    </div>\n                    <div className=\"p-col-12\">\n                        <Card style={{'width': '100%', 'height': '100%', 'text-align': 'left'}} title={\"Study Space\"}>\n                            <div className=\"p-grid\">\n                                <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                    <h4>Select Building:</h4>\n                                    <Dropdown style={{'width': '150px'}} \n                                        optionLabel=\"location\"\n                                        value={this.state.building} \n                                        options={locations} \n                                        onChange={this.buildingChanged} \n                                        placeholder=\"Select a Building\"\n                                    />\n                                </div>\n                                <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                    <h4>Building Information:</h4>\n                                </div>\n                                <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                    <h4>Name:</h4> \n                                    {curr_location_data.name} ({curr_location_data.short_name})\n                                </div>\n                                \n                                <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                    <h4>Comments:</h4>\n                                    {this.createComments()}\n                                </div>\n\n                                <div className=\"p-col-12\" style={{'text-align': 'left'}}>\n                                    <h4>Average rating:</h4>\n                                    <Rating value={curr_location_data.average_review} readonly={true} stars={10} cancel={false} />\n                                </div>         \n                                \n                            </div>\n\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyD5x5n_np54p6TzuSVG_DYu9nEQSWH75LI'\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {MapContainer} from \"./MapContainer\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}